package org.uob.a2.parser;

import java.lang.reflect.Constructor;
import java.util.ArrayList;

/**
 * The {@code Tokeniser} class is responsible for converting a string input into a list of tokens
 * that can be parsed into commands by the game.
 * 
 * <p>
 * The tokeniser identifies keywords, variables, and special symbols, assigning each a {@code TokenType}.
 * </p>
 */
public class Tokeniser {

    private final ArrayList<Token> tokens = new ArrayList<>();

    //public Tokeniser()

    public ArrayList<Token> getTokens() {
        return tokens;
    }
    //Retrieves the list of tokens generated by the tokeniser.
    //Returns: an ArrayList of Token objects
    
    public String sanitise(String s) {
        return s.trim().toLowerCase();
    }
    //Sanitises the input string by converting it to lowercase and trimming whitespace.
    //Parameters: s - the input string to sanitise
    //Returns: the sanitised string
    
    public void tokenise(String s) {
        tokens.clear();
        String sanitisedInput = sanitise(s);
        String[] words = sanitisedInput.split("\\s+");

        for (String word : words) {
            switch (word) {
                case "move" -> tokens.add(new Token(TokenType.MOVE));
                case "get" -> tokens.add(new Token(TokenType.GET));
                case "drop" -> tokens.add(new Token(TokenType.DROP));
                case "look" -> tokens.add(new Token(TokenType.LOOK));
                case "status" -> tokens.add(new Token(TokenType.STATUS));
                case "help" -> tokens.add(new Token(TokenType.HELP));
                case "quit" -> tokens.add(new Token(TokenType.QUIT));
                case "on", "with", "using" -> tokens.add(new Token(TokenType.PREPOSITION, word));
                default -> tokens.add(new Token(TokenType.VAR, word));
            }
        }
        tokens.add(new Token(TokenType.EOL)); // End of line token
    }
    //Tokenises the input string into a list of Token objects based on predefined keywords and patterns.
    //Keywords such as "move", "get", "drop", and others are assigned specific TokenTypes. Words that do not match keywords are treated as variables and assigned the VAR type.
    //Parameters: s - the input string to tokenise
   
}